<html><head><script src="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\jshidebutton.js"></script><link rel="stylesheet" type="text/css" href="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\styling.css">
 </head>  
 <body> 
 <pre>
<h3> Persist.h</h3><h4>Dependencies:</h4><a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\NoSqlDb.h.htm"><label>NoSqlDb.h</label></a> <a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\Persist.h.htm"><label>Persist.h</label></a> <a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\XmlDocument.h.htm"><label>XmlDocument.h</label></a> <a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\XmlElement.h.htm"><label>XmlElement.h</label></a> 
 ----------------------------------------------------------------------------------------------------

#pragma once

/////////////////////////////////////////////////////////////////////
// Persist.h - XML persistence										//
//  Mandar Mathure, CSE687 - Object Oriented Design, Spring 2017	//
//																   //
//  Language:      Visual C++ 2015		                           //
//  Platform:      Lenovo y700, Windows 10						   //
//  Application:   Dependency Analyzer CSE687 Pr2, Mar-7           //
//  Author:        Mandar Mathure, CST 4-187, Syracuse University  //
//                 (315) 949-8682, mmathure@syr.edu                //
//																	//
/////////////////////////////////////////////////////////////////////
/*
* - Manual Information
This package creates a public interface to writing the database contents in a XML format. we need to create and save a databse 
before invoking this function.

Public Interface:
=================
makexml()   /prints database contents in a xml format


* - Build Process:
Required files
XMLDocument.h,XmlElement.h,NoSqlDb.h
Build commands
This is a static library builds with code analyzer
- devenv CodeAnalyzerEx.sln

* - Maintenance information
ver 1.0 : 11 Mar 2017
-	first release
*/



#include "../XmlDocument/XmlDocument.h"
#include "../XmlDocument/XmlElement/XmlElement.h"
#include &lt;iostream&gt;
#include "../NoSqlDb/NoSqlDb.h"
using namespace XmlProcessing;

class X <br> <button onclick = "hidebutton('413744')">+</button> { <Span id="413744"  > 

	
public :
	std::string makexml(NoSqlDb&lt;std::string&gt; db);


<br></Span>} ;


inline std::string X::makexml(NoSqlDb&lt;StrData&gt; db) <br> <button onclick = "hidebutton('413853')">+</button> { <Span id="413853"  > 


	using sPtr = std::shared_ptr &lt; AbstractXmlElement &gt;;

	sPtr root = makeTaggedElement("Dependency Table");

	for (unsigned int i = 0; i &lt; db.keys().size(); ++i)
	<br> <button onclick = "hidebutton('414011')">+</button> { <Span id="414011"  > 

		sPtr pKeyElem = makeTaggedElement("File Name");
		root-&gt;addChild(pKeyElem);
		sPtr pkElem = makeTextElement(db.keys().at(i));
		pKeyElem-&gt;addChild(pkElem);


		sPtr pChildren = makeTaggedElement("Dependencies");
		root-&gt;addChild(pChildren);


		for (unsigned int m = 0; m &lt; db.value(db.keys().at(i)).child.size(); ++m)
		<br> <button onclick = "hidebutton('414324')">+</button> { <Span id="414324"  > 
			sPtr pchild = makeTextElement(db.value(db.keys().at(i)).child.at(m));
			pChildren-&gt;addChild(pchild);
		<br></Span>} 


	<br></Span>} 


	sPtr docEl = makeDocElement(root);
	std::cout &lt;&lt; "  " &lt;&lt; docEl-&gt;toString();
	std::cout &lt;&lt; "\n\n";
	return docEl-&gt;toString();
<br></Span>} 


</pre> 
</body>
 </html>
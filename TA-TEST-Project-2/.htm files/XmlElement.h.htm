<html><head><script src="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\jshidebutton.js"></script><link rel="stylesheet" type="text/css" href="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\styling.css">
 </head>  
 <body> 
 <pre>
<h3> XmlElement.h</h3><h4>Dependencies:</h4><a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\XmlDocument.h.htm"><label>XmlDocument.h</label></a> <a href ="D:\imp\OOD\Projects\p2dep - Copy\p2dep - Copy\TA-TEST-Project-2\.htm files\XmlElement.h.htm"><label>XmlElement.h</label></a> 
 ----------------------------------------------------------------------------------------------------

#ifndef XMLELEMENT_H
#define XMLELEMENT_H
///////////////////////////////////////////////////////////////////
// XmlElement.h - define XML Element types                       //
// ver 1.5                                                       //
// Application: Help for CSE687 Pr#2, Spring 2015                //
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   //
// Author:      Jim Fawcett, CST 4-187, 443-3948                 //
//              jfawcett@twcny.rr.com                            //
///////////////////////////////////////////////////////////////////
/*
* Package Operations:
* -------------------
* This package is intended to help students in CSE687 - Object Oriented Design
* get started with Project #2 - XML Document Model.  It uses C++11 constructs,
* most noteably std::shared_ptr.  The XML Document Model is essentially
* a program-friendly wrapper around an Abstract Syntax Tree (AST) used to
* contain the results of parsing XML markup.
*
* Abstract Syntax Trees are unordered trees with two types of nodes:
*   Terminal nodes     - nodes with no children
*   Non-Terminal nodes - nodes which may have a finite number of children
* They are often used to contain the results of parsing some language.
*
* The elements defined in this package will be used in the AST defined in
* the AbstractSyntaxTree package, included in this Visual Studio 2013
* solution.
*   AbstractXmlElement - base for all the XML Element types
*   DocElement         - XML element with children designed to hold prologue, Xml root, and epilogue
*   TaggedElement      - XML element with tag, attributes, child elements
*   TextElement        - XML element with only text, no markup
*   CommentElement     - XML element with comment markup and text
*   ProcInstrElement   - XML element with markup and attributes but no children
*   XmlDeclarElement   - XML declaration
*
* Required Files:
* ---------------
*   - XmlElement.h, XmlElement.cpp
*
* Build Process:
* --------------
*   devenv AST.sln /debug rebuild
*
* Maintenance History:
* --------------------
* ver 1.5 : 22 Feb 15
* - brought comments up to date
* ver 1.4 : 21 Feb 15
* - Added XmlDeclElement.  It has the syntax of a ProcInstrElement but has the
*   constraint that if present it must be the first child of the document.  The
*   best way to handle this seemed to be to create anther element type and have
*   the XmlDocument constructor always add as the first child.
* - Fixed a bug in DocElement::addChild found by Venkat Subha Rao Cheedella. 
*   addChild now correctly handles allowing as many comments and ProcInstructions
*   as needed but only one tagged element as the root of the XML information.
* ver 1.3 : 17 Feb 15
* - Removed move ctor and move assign declar comments in all classes.
*   Move construction and move assignment is needed only by the XmlDocument class
* - added addAttribute and removeAttribute to the ProcInstrElement class
* - fixed a bug in the DocElement::addChild method that prevented multiple
*   ProcInstrElements and CommentElements from being added.
* - Scott Constable pointed out two of these three problems to me earlier today.
*   Thanks Scott!
* ver 1.2 : 14 Feb 15
* - removed removeChild(const std::string& value);
* - declared deleted copy constructor and copy assignment
* - added comment declaring move constructor and move assignment
* - added DocElement - I decided that Scott Constable was right about this
* - fixed flaw in declaration of ProcInstrElement attribs_ member
* - return string by value from AbstractXmlElement::value() and all derived elements
* ver 1.1 : 12 Feb 15
* - modified Element::toString() to improve whitespace handling
* - added attribute test in test stub
* Ver 1.0 : 11 Feb 15
* - first release
*/

#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

namespace XmlProcessing
<br> <button onclick = "hidebutton('390667')">+</button> { <Span id="390667"  > 
  /////////////////////////////////////////////////////////////////////////////
  // AbstractXmlElement - base class for all concrete element types

  class AbstractXmlElement
  <br> <button onclick = "hidebutton('390842')">+</button> { <Span id="390842"  > 
  public:
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual bool addAttrib(const std::string& name, const std::string& value);
    virtual bool removeAttrib(const std::string& name);
    virtual std::string value() = 0;
    virtual std::string toString() = 0;
    virtual ~AbstractXmlElement();
  protected:
    static size_t count;
    static size_t tabSize;
  <br></Span>} ;

  inline bool AbstractXmlElement::addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild) <br> <button onclick = "hidebutton('391390')">+</button> { <Span id="391390"  >  return false; <br></Span>} 
  inline bool AbstractXmlElement::removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild) <br> <button onclick = "hidebutton('391497')">+</button> { <Span id="391497"  >  return false; <br></Span>} 
  inline bool AbstractXmlElement::addAttrib(const std::string& name, const std::string& value) <br> <button onclick = "hidebutton('391609')">+</button> { <Span id="391609"  >  return false; <br></Span>} 
  inline bool AbstractXmlElement::removeAttrib(const std::string& name) <br> <button onclick = "hidebutton('391698')">+</button> { <Span id="391698"  >  return false; <br></Span>} 
  inline AbstractXmlElement::~AbstractXmlElement() <br> <button onclick = "hidebutton('391766')">+</button> { <Span id="391766"  > <br></Span>} 

  /////////////////////////////////////////////////////////////////////////////
  // DocElement - holds the document prologue, XML tree, and epilog

  class DocElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('391962')">+</button> { <Span id="391962"  > 
  public:
    DocElement(std::shared_ptr&lt;AbstractXmlElement&gt; pRoot = nullptr);
    ~DocElement() <br> <button onclick = "hidebutton('392058')">+</button> { <Span id="392058"  > <br></Span>} 
    DocElement(const DocElement& doc) = delete;
    DocElement& operator=(const DocElement& doc) = delete;
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual std::string value();
    virtual std::string toString();
  private:
    bool hasXmlRoot();
    std::vector&lt;std::shared_ptr&lt;AbstractXmlElement&gt;&gt; children_;
  <br></Span>} ;

  std::shared_ptr&lt;AbstractXmlElement&gt; makeDocElement(std::shared_ptr&lt;AbstractXmlElement&gt; pRoot = nullptr);

  /////////////////////////////////////////////////////////////////////////////
  // TextElement - represents the text part of an XML element

  class TextElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('392769')">+</button> { <Span id="392769"  > 
  public:
    TextElement(const std::string& text) : text_(text) <br> <button onclick = "hidebutton('392834')">+</button> { <Span id="392834"  > <br></Span>} 
    virtual ~TextElement() <br> <button onclick = "hidebutton('392863')">+</button> { <Span id="392863"  > <br></Span>} 
    TextElement(const TextElement& te) = delete;
    TextElement& operator=(const TextElement& te) = delete;
    virtual std::string value();
    virtual std::string toString();
  private:
    std::string text_;
  <br></Span>} ;

  inline std::string TextElement::value() <br> <button onclick = "hidebutton('393117')">+</button> { <Span id="393117"  >  return text_; <br></Span>} 

  std::shared_ptr&lt;AbstractXmlElement&gt; makeTextElement(const std::string& text);

  /////////////////////////////////////////////////////////////////////////////
  // Element - represents a tagged element with attributes and child elements

  class TaggedElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('393420')">+</button> { <Span id="393420"  > 
  public:
    TaggedElement(const std::string& tag) : tag_(tag) <br> <button onclick = "hidebutton('393484')">+</button> { <Span id="393484"  > <br></Span>} ;
    TaggedElement(const TaggedElement& te) = delete;
    virtual ~TaggedElement() <br> <button onclick = "hidebutton('393568')">+</button> { <Span id="393568"  > <br></Span>} 
    TaggedElement& operator=(const TaggedElement& te) = delete;
    virtual bool addChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual bool removeChild(std::shared_ptr&lt;AbstractXmlElement&gt; pChild);
    virtual bool removeChild(const std::string& value);
    virtual bool addAttrib(const std::string& name, const std::string& value);
    virtual bool removeAttrib(const std::string& name);
    virtual std::string value();
    virtual std::string toString();
  private:
    std::string tag_;
    std::vector&lt;std::shared_ptr&lt;AbstractXmlElement&gt;&gt; children_;
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;
  <br></Span>} ;

  std::shared_ptr&lt;AbstractXmlElement&gt; makeTaggedElement(const std::string& tag);

  /////////////////////////////////////////////////////////////////////////////
  // CommentElement - represents XML comments, e.g., &lt;!-- comment text --&gt;
  //
  // Incomplete

  class CommentElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('394495')">+</button> { <Span id="394495"  > 
  public:
    CommentElement(const std::string& text) : commentText_(text) <br> <button onclick = "hidebutton('394570')">+</button> { <Span id="394570"  > <br></Span>} 
    CommentElement(const CommentElement& ce) = delete;
    virtual ~CommentElement() <br> <button onclick = "hidebutton('394656')">+</button> { <Span id="394656"  > <br></Span>} 
    CommentElement& operator=(const CommentElement& ce) = delete;
    virtual std::string value() <br> <button onclick = "hidebutton('394755')">+</button> { <Span id="394755"  >  return commentText_; <br></Span>} 
    virtual std::string toString() <br> <button onclick = "hidebutton('394814')">+</button> { <Span id="394814"  >  return "to be defined"; <br></Span>} 
  private:
    std::string commentText_ = "to be defined";
  <br></Span>} ;

  std::shared_ptr&lt;AbstractXmlElement&gt; makeCommentElement(const std::string& comment);

  /////////////////////////////////////////////////////////////////////////////
  // ProcInstrElement - represents XML Processing Instructions, e.g., &lt;?xml version="1.0"?&gt;
  //
  // Incomplete

  class ProcInstrElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('395230')">+</button> { <Span id="395230"  > 
  public:
    ProcInstrElement(const ProcInstrElement& pe) = delete;
    ProcInstrElement(const std::string& type) : type_(type) <br> <button onclick = "hidebutton('395358')">+</button> { <Span id="395358"  > <br></Span>} 
    ProcInstrElement& operator=(const ProcInstrElement& pe) = delete;
    virtual bool addAttrib(const std::string& name, const std::string& value);
    virtual bool removeAttrib(const std::string& name);
    virtual std::string value() <br> <button onclick = "hidebutton('395594')">+</button> { <Span id="395594"  >  return type_; <br></Span>} 
    virtual std::string toString() <br> <button onclick = "hidebutton('395646')">+</button> { <Span id="395646"  >  return "to be defined"; <br></Span>} 
  private:
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;
    std::string type_ = "xml declaration";
    std::string text;
  <br></Span>} ;

  std::shared_ptr&lt;AbstractXmlElement&gt; makeProcInstrElement(const std::string& type);

  /////////////////////////////////////////////////////////////////////////////
  // XmlDeclarElement - &lt;?xml version="1.0"?&gt;

  class XmlDeclarElement : public AbstractXmlElement
  <br> <button onclick = "hidebutton('396074')">+</button> { <Span id="396074"  > 
  public:
    XmlDeclarElement(const ProcInstrElement& pe) = delete;
    XmlDeclarElement() <br> <button onclick = "hidebutton('396165')">+</button> { <Span id="396165"  > <br></Span>} 
    XmlDeclarElement& operator=(const ProcInstrElement& pe) = delete;
    virtual bool addAttrib(const std::string& name, const std::string& value);
    virtual bool removeAttrib(const std::string& name);
    virtual std::string value() <br> <button onclick = "hidebutton('396401')">+</button> { <Span id="396401"  >  return ""; <br></Span>} 
    virtual std::string toString();
  private:
    std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribs_;
    std::string type_ = "xml declaration";
  <br></Span>} ;

  std::shared_ptr&lt;AbstractXmlElement&gt; makeXmlDeclarElement();


  void title(const std::string& title, char underlineChar = '-');
<br></Span>} 
#endif

</pre> 
</body>
 </html>